package com.distributed.sort.distributedsort.controller;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.distributed.sort.distributedsort.config.MessagingConfig;
import com.distributed.sort.distributedsort.models.RandomNumber;
import com.distributed.sort.distributedsort.service.RandomNumberSqlService;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
public class RandomNumberController {
	
	private final RabbitTemplate rabbitTemplate;
	
	@Autowired
	RandomNumberSqlService randomNumberSqlService;
	
	public RandomNumberController(RabbitTemplate rabbitTemplate) {
		super();
		this.rabbitTemplate = rabbitTemplate;
	}
	
	
	@GetMapping("/health-check")
    public ResponseEntity<Map<String, String>> healthCheck() {
        Map<String, String> response = new HashMap<>();
        response.put("status", "healthy");
        System.out.println("Recieved System Health Check");
        return ResponseEntity.ok(response);
    }
	

	@PostMapping("/distributed-sort-autogenerated")
	public ResponseEntity<List<Integer>> saveValue(@RequestBody RandomNumber requestBody) {
		try {
			
//			System.out.println("WTF " + requestBody.getRandomNumber());
			
			List<Integer> res = randomNumberSqlService.randomNumberGenerator(requestBody.getRandomNumber());
			
			 // ObjectMapper objectMapper = new ObjectMapper();
			 // String json = objectMapper.writeValueAsString(randomNumber);
			 // rabbitTemplate.convertAndSend("", "random-number", json);
			
			ObjectMapper objectMapper = new ObjectMapper();
			String json = objectMapper.writeValueAsString(requestBody);
			
//			for (int i : res) {
//				System.out.println("*** Num: " + i);
//			}
			
			
			
			// Send message to the queue
			 //rabbitTemplate.convertAndSend("random-number-exchange", "random-number-routing-key", json);
//			List<Integer> list = new ArrayList<>();
//			list.add(0);
			//rabbitTemplate.convertAndSend(MessagingConfig.EXCHANGE, MessagingConfig.ROUTING_KEY, res);
			
			// return "Success -> Check DB";
			return ResponseEntity.ok(res);
			
		} catch (Exception e) {
			System.out.println(e);
			//return "Error";
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}
	
	@PostMapping("/add-numbers")
    public ResponseEntity<List<Integer>> addNumbers(@RequestBody List<Integer> numbers) {
        try {
//        	System.out.println("List came through");
            Collections.sort(numbers, Collections.reverseOrder());
            // rabbitTemplate.convertAndSend(MessagingConfig.EXCHANGE, MessagingConfig.ROUTING_KEY, numbers);
            return ResponseEntity.ok(numbers); // Return sorted list
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Collections.emptyList());
        }
    }
	
    @GetMapping("/data")
    public Page<RandomNumber> getAllData(@RequestParam(defaultValue = "0") int page,
                                            @RequestParam(defaultValue = "50") int size) {
    	
        try {
        	
			Pageable pageable = PageRequest.of(page, size);
			return randomNumberSqlService.getAllData(pageable);
			
		} catch (Exception e) {
			
			e.printStackTrace();
			return null;
		}
    }
    
    
//    @PostMapping("/distributed-sort-added")
//    public String saveValue(@RequestBody NumberRequestBody requestBody) {
//		try {
//			
//			randomNumberSqlService.randomNumberGenerator(requestBody.getRandomNumberCount());
//			 // ObjectMapper objectMapper = new ObjectMapper();
//			 // String json = objectMapper.writeValueAsString(randomNumber);
//			 // rabbitTemplate.convertAndSend("", "random-number", json);
//			
//			ObjectMapper objectMapper = new ObjectMapper();
//			String json = objectMapper.writeValueAsString(requestBody);
//			
//			// Send message to the queue
//			// rabbitTemplate.convertAndSend("random-number-exchange", "random-number-routing-key", json);
//			List<Integer> list = new ArrayList<>();
//			list.add(0);
////			rabbitTemplate.convertAndSend(MessagingConfig.EXCHANGE, MessagingConfig.ROUTING_KEY, list);
//			
//			return "Success -> Check DB";
//		} catch (Exception e) {
//			System.out.println(e);
//			return "Error";
//		}
//	}
	
}
